{"/home/travis/build/npmtest/node-npmtest-generator-meanjs/test.js":"/* istanbul instrument in package npmtest_generator_meanjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/lib.npmtest_generator_meanjs.js":"/* istanbul instrument in package npmtest_generator_meanjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_meanjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_meanjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-meanjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_meanjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_meanjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_meanjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_meanjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_meanjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_meanjs.__dirname + '/lib.npmtest_generator_meanjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/app/index.js":"'use strict';\n\nvar Promise = require('bluebird'),\n  child_process = require('child_process'),\n  fs = require('fs'),\n  rimraf = require('rimraf'),\n  path = require('path'),\n  s = require('underscore.string'),\n  generators = require('yeoman-generator'),\n  log = require('./log');\n\nvar exec = function (cmd) {\n  return new Promise(function (resolve, reject) {\n    child_process.exec(cmd, function (err, res) {\n      if(err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n// Global Variables\nvar folder, folderPath, version;\n\nvar versions = {\n  'master': 'master',\n  '0.4.0': 'v0.4.0',\n  '0.4.1': 'v0.4.1',\n  '0.4.2': 'v0.4.2'\n};\n\nmodule.exports = generators.Base.extend({\n  \n  init: function () {\n    this.pkg = this.fs.readJSON(path.join(__dirname, '../package.json'));\n\n    this.on('end', function () {\n      if (!this.options['skip-install']) {\n        log.green('Running npm install for you....');\n        log.green('This may take a couple minutes.');\n        exec('cd ' + folder + ' && npm install')\n          .then(function () {\n            log('');\n            log.green('------------------------------------------');\n            log.green('Your MEAN.js application is ready!');\n            log('');\n            log.green('To Get Started, run the following command:');\n            log('');\n            log.yellow('cd ' + folder + ' && grunt');\n            log('');\n            log.green('Happy Hacking!');\n            log.green('------------------------------------------');\n          });\n      }\n    });\n  },\n\n  checkForGit: function () {\n    var done = this.async();\n\n    exec('git --version')\n      .then(function () {\n        done();\n      })\n      .catch(function (err) {\n        log.red(new Error(err));\n        return;\n      });\n  },\n\n  welcomeMessage: function () {\n    log.green('You\\'re using the official MEAN.JS generator.');\n  },\n\n  promptForVersion: function () {\n    var done = this.async();\n\n    var choices = [];\n    for(var v in versions) {\n      choices.push(v);\n    }\n\n    var prompt = {\n      type: 'list',\n      name: 'version',\n      message: 'What mean.js version would you like to generate?',\n      choices: choices,\n      default: 1\n    };\n\n    this.prompt(prompt, function (props) {\n      version = props.version;\n      done();\n    }.bind(this));\n\n  },\n\n  promptForFolder: function () {\n    var done = this.async();\n\n    log.red(version);\n\n    var prompt = {\n      name: 'folder',\n      message: 'In which folder would you like the project to be generated? This can be changed later.',\n      default: 'mean'\n    };\n\n    this.prompt(prompt, function (props) {\n      folder = props.folder;\n      folderPath = './' + folder + '/';\n      done();\n    }.bind(this));\n  },\n\n  cloneRepo: function () {\n    var done = this.async();\n\n    log.green('Cloning the MEAN repo.......');\n\n    exec('git clone --branch ' + versions[version] + ' https://github.com/meanjs/mean.git ' + folder)\n      .then(function () {\n        done();\n      })\n      .catch(function (err) {\n        log.red(err);\n        return;\n      });\n  },\n\n  getPrompts: function () {\n    var done = this.async();\n\n    var prompts = [{\n      name: 'appName',\n      message: 'What would you like to call your application?',\n      default: 'MEAN'\n    }, {\n      name: 'appDescription',\n      message: 'How would you describe your application?',\n      default: 'Full-Stack JavaScript with MongoDB, Express, AngularJS, and Node.js'\n    }, {\n      name: 'appKeywords',\n      message: 'How would you describe your application in comma seperated key words?',\n      default: 'MongoDB, Express, AngularJS, Node.js'\n    }, {\n      name: 'appAuthor',\n      message: 'What is your company/author name?'\n    }, {\n      type: 'confirm',\n      name: 'addArticleExample',\n      message: 'Would you like to generate the article example CRUD module?',\n      default: true\n    }, {\n      type: 'confirm',\n      name: 'addChatExample',\n      message: 'Would you like to generate the chat example module?',\n      default: true\n    }];\n\n    this.prompt(prompts, function(props) {\n      this.appName = props.appName;\n      this.appDescription = props.appDescription;\n      this.appKeywords = props.appKeywords;\n      this.appAuthor = props.appAuthor;\n      this.addArticleExample = props.addArticleExample;\n      this.addChatExample = props.addChatExample;\n\n      this.slugifiedAppName = s(this.appName).slugify().value();\n      this.humanizedAppName = s(this.appName).humanize().value();\n      this.capitalizedAppAuthor = s(this.appAuthor).capitalize().value();\n\n      done();\n    }.bind(this));\n  },\n\n  replacePackageConfigs: function () {\n    var done = this.async();\n\n    var packageJson = JSON.parse(fs.readFileSync(folderPath + 'package.json'));\n    packageJson.name = this.slugifiedAppName;\n    packageJson.description = this.appDescription;\n    packageJson.author = this.appAuthor;\n\n    fs.writeFile(folderPath + 'package.json', JSON.stringify(packageJson, null, 2), function (err) {\n      if(err) {\n        return log.red(err);\n      }\n      done();\n    });\n  },\n\n  replaceBowerConfigs: function () {\n    var done = this.async();\n\n    var bowerJson = JSON.parse(fs.readFileSync(folderPath + 'bower.json'));\n    bowerJson.name = this.slugifiedAppName;\n    bowerJson.description = this.appDescription;\n\n    fs.writeFile(folderPath + 'bower.json', JSON.stringify(bowerJson, null, 2), function (err) {\n      if (err) {\n        return log.red(err);\n      }\n      done();\n    });\n  },\n\n  replaceConfigConfigs: function () {\n    var done = this.async();\n\n    var titleRegex = /title: 'MEAN.JS'/g;\n    var descriptionRegex = /description: 'Full-Stack JavaScript with MongoDB, Express, AngularJS, and Node.js'/g;\n    var keywordsRegex = /keywords: 'mongodb, express, angularjs, node.js, mongoose, passport'/g;\n\n    var configFile = (fs.readFileSync(folderPath + 'config/env/default.js')).toString();\n\n    configFile.replace(titleRegex, 'title: \\'' + this.slugifiedAppName + '\\'');\n    configFile.replace(descriptionRegex, 'description: \\'' + this.appDescription + '\\'');\n    configFile.replace(keywordsRegex, 'keywords: \\'' + this.appKeywords + '\\'');\n\n    fs.writeFile(folderPath + 'config/env/default.js', configFile, function (err) {\n      if(err) {\n        return log.red(err);\n      }\n      done();\n    });\n  },\n\n  removeExampleModules: function () {\n    var promises = [];\n    \n    var done = this.async();\n\n    if(!this.addChatExample) {\n      var p1 = Promise.defer();\n      promises.push(p1);\n      \n      rimraf(folderPath + 'modules/chat', function(err) {\n        if (err) {\n          log.red(err);\n          p1.reject(err);\n        } else {\n          p1.resolve();\n        }\n      });\n    }\n    \n    if(!this.addArticleExample) {\n      var p2 = Promise.defer();\n      promises.push(p2);\n      \n      rimraf(folderPath + 'modules/articles', function(err) {\n        if (err) {\n          log.red(err);\n          p2.reject(err);\n        } else {\n          p2.resolve();\n        }\n      });\n    }\n    \n    Promise\n      .all(promises)\n      .then(function() {\n        done();\n      })\n      .catch(function() {\n        log.red('Something failed.');\n        done();\n      });\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/app/log.js":"'use strict';\n\nvar chalk = require('chalk');\n\nvar log = function log(value) {\n  console.log(value);\n};\n\nlog.green = function(value) {\n  console.log(chalk.green(value));\n};\n\nlog.blue = function(value) {\n  console.log(chalk.blue(value));\n};\n\nlog.red = function(value) {\n  console.log(chalk.red(value));\n};\n\nlog.yellow = function(value) {\n  console.log(chalk.yellow(value));\n};\n\nlog.magenta = function(value) {\n  console.log(chalk.magenta(value));\n};\n\nlog.cyan = function(value) {\n  console.log(chalk.cyan(value));\n};\n\nlog.white = function(value) {\n  console.log(chalk.white(value));\n};\n\nlog.gray = function(value) {\n  console.log(chalk.gray(value));\n};\n\nmodule.exports = log;\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/gulpfile.js":"var gulp = require('gulp'),\n  eslint = require('gulp-eslint'),\n  jshint = require('gulp-jshint'),\n  mocha = require('gulp-mocha');\n\n// ESLint JS linting task\ngulp.task('eslint', function () {\n  return gulp\n    .src(['./app/**/*', './test/**/*', '!./test/temp'])\n    .pipe(eslint())\n    .pipe(eslint.format());\n});\n\n// JS linting task\ngulp.task('jshint', function () {\n  return gulp\n    .src(['./app/**/*', './test/**/*', '!./test/temp'])\n    .pipe(jshint())\n    .pipe(jshint.reporter('default'))\n    .pipe(jshint.reporter('fail'));\n});\n\ngulp.task('lint', gulp.parallel('eslint', 'jshint'));\n\n// Mocha test task\ngulp.task('mocha', function () {\n  return gulp\n    .src(['./test/**/*', '!./test/temp'])\n    .pipe(mocha({\n      reporter: 'spec'\n    }));\n});\n\ngulp.task('test', gulp.series('mocha', 'lint'));\n\n// The default task (called when you run `gulp` from cli)\ngulp.task('default');\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-config/templates/_.client.config.js":"(function() {\n  'use strict';\n\n  // <%= humanizedModuleName %> module config\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .run(menuConfig);\n\n  menuConfig.$inject = ['Menus'];\n\n  function menuConfig(Menus) {\n    // Config logic\n    // ...\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-controller/templates/_.client.controller.js":"(function() {\n  'use strict';\n\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .controller('<%= classifiedControllerName %>Controller', <%= classifiedControllerName %>Controller);\n\n  <%= classifiedControllerName %>Controller.$inject = ['$scope'];\n\n  function <%= classifiedControllerName %>Controller($scope) {\n    var vm = this;\n\n    // <%= humanizedControllerName %> controller logic\n    // ...\n\n    init();\n\n    function init() {\n    }\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-directive/templates/_.client.directive.js":"(function () {\n  'use strict';\n\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .directive('<%= camelizedName %>', <%= camelizedName %>);\n\n  <%= camelizedName %>.$inject = [/*Example: '$state', '$window' */];\n\n  function <%= camelizedName %>(/*Example: $state, $window */) {\n    return {\n      template: '<div></div>',\n      restrict: 'E',\n      link: function postLink(scope, element, attrs) {\n        // <%= humanizedName %> directive logic\n        // ...\n\n        element.text('this is the <%= camelizedName %> directive');\n      }\n    };\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-filter/templates/_.client.filter.js":"(function () {\n  'use strict';\n\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .filter('<%= camelizedName %>', <%= camelizedName %>);\n\n  <%= camelizedName %>.$inject = [/*Example: '$state', '$window' */];\n\n  function <%= camelizedName %>(/*Example: $state, $window */) {\n    return function (input) {\n      // <%= humanizedName %> directive logic\n      // ...\n\n      return '<%= camelizedName %> filter: ' + input;\n    };\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-route/templates/_.client.route.js":"$stateProvider\n      .state('<%= slugifiedName %>', {\n        url: '/<%= slugifiedRoutePath %>',\n        templateUrl: 'modules/<%= slugifiedModuleName %>/client/views/<%= slugifiedViewName %>.client.view.html',\n        controller: '<%= classifiedControllerName %>Controller',\n        controllerAs: 'vm'\n      })\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-route/templates/_.client.routes.js":"(function () {\n  'use strict';\n\n  //Setting up route\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .config(routeConfig);\n\n  routeConfig.$inject = ['$stateProvider'];\n\n  function routeConfig($stateProvider) {\n    // <%= humanizedModuleName %> state routing\n    $stateProvider\n      .state('<%= slugifiedName %>', {\n        url: '/<%= slugifiedRoutePath %>',\n        templateUrl: 'modules/<%= slugifiedModuleName %>/client/views/<%= slugifiedViewName %>.client.view.html',\n        controller: '<%= classifiedControllerName %>Controller',\n        controllerAs: 'vm'\n      });\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/angular-service/templates/_.client.service.js":"(function () {\n  'use strict';\n\n  angular\n    .module('<%= slugifiedModuleName %>')\n    .factory('<%= slugifiedModuleName %>Service', <%= slugifiedModuleName %>Service);\n\n  <%= slugifiedModuleName %>Service.$inject = [/*Example: '$state', '$window' */];\n\n  function <%= slugifiedModuleName %>Service(/*Example: $state, $window */) {\n    // <%= humanizedName %> service logic\n    // ...\n\n    // Public API\n    return {\n      someMethod: function () {\n        return true;\n      }\n    };\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/express-controller/templates/_.server.controller.js":"'use strict';\n\n/**\n * Module dependencies.\n */\nvar path = require('path'),\n  mongoose = require('mongoose'),\n  errorHandler = require(path.resolve('./modules/core/server/controllers/errors.server.controller')),\n  _ = require('lodash');\n\n/**\n * Create a <%= humanizedSingularName %>\n */\nexports.create = function (req, res) {\n\n};\n\n/**\n * Show the current <%= humanizedSingularName %>\n */\nexports.read = function (req, res) {\n\n};\n\n/**\n * Update a <%= humanizedSingularName %>\n */\nexports.update = function (req, res) {\n\n};\n\n/**\n * Delete an <%= humanizedSingularName %>\n */\nexports.delete = function (req, res) {\n\n};\n\n/**\n * List of <%= humanizedPluralName %>\n */\nexports.list = function (req, res) {\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/express-model/templates/_.server.model.js":"'use strict';\n\n/**\n * Module dependencies.\n */\nvar mongoose = require('mongoose'),\n  Schema = mongoose.Schema;\n\n/**\n * <%= classifiedModelName %> Schema\n */\nvar <%= classifiedModelName %>Schema = new Schema({\n  // <%= classifiedModelName %> model fields\n  // ...\n});\n\nmongoose.model('<%= classifiedModelName %>', <%= classifiedModelName %>Schema);\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/express-route/templates/_.server.routes.js":"'use strict';\n\nmodule.exports = function(app) {\n  // Routing logic   \n  // ...\n};\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/mean-module/templates/_.client.module.js":"(function (app) {\n  'use strict';\n\n  app.registerModule('<%= slugifiedName %>');\n}(ApplicationConfiguration));\n","/home/travis/build/npmtest/node-npmtest-generator-meanjs/node_modules/generator-meanjs/mean-module/templates/_.server.config.js":"'use strict';\n\n/**\n * Module dependencies\n */\nvar path = require('path'),\n  config = require(path.resolve('./config/config'));\n\n/**\n * <%= humanizedName %> module init function.\n */\nmodule.exports = function (app, db) {\n\n};\n"}